// Generated by CoffeeScript 1.9.3
(function() {
  var colors, fs, instrumentCoffee, path, printUsage, vm;

  fs = require("fs");

  path = require("path");

  vm = require("vm");

  colors = require("colors");

  instrumentCoffee = require("./coffeescript_instrumenter").instrumentCoffee;

  printUsage = function() {
    console.log("Usage: pencil-tracer <command> <infile>");
    console.log("  where <command> is one of:");
    console.log("    'instrument'       outputs instrumented JavaScript");
    console.log("    'trace'            runs instrumented JS and outputs trace");
    console.log("    'animate'          visualizes the trace with pretty colours");
    console.log("    'ast'              outputs instrumented AST");
    return console.log("  and <infile> is the CoffeeScript program to instrument");
  };

  exports.main = function(args) {
    var ast, code, command, event, i, index, infile, js, len, loc, m, options, printFrame, ref, ref1, results, sandbox, type, withinLocation, wrapped;
    if (args.length === 4) {
      ref = args.slice(2), command = ref[0], infile = ref[1];
      code = fs.readFileSync(infile, "utf-8");
      if (command === "instrument") {
        js = instrumentCoffee(infile, code);
        return console.log(js);
      } else if (command === "trace" || command === "animate") {
        js = instrumentCoffee(infile, code);
        sandbox = {
          pencilTrace: function(event) {
            return sandbox.pencilTraceEvents.push(event);
          },
          pencilTraceEvents: [],
          console: console
        };
        options = {
          filename: path.basename(infile)
        };
        m = require("module");
        wrapped = vm.runInContext(m.wrap(js), vm.createContext(sandbox), options);
        wrapped(exports, require, module, path.basename(infile), path.dirname(infile));
        if (command === "trace") {
          ref1 = sandbox.pencilTraceEvents;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            event = ref1[i];
            loc = event.location;
            type = event.type === "" ? "     " : event.type;
            results.push(console.log(type + " " + loc.first_line + ":" + loc.first_column + "-" + loc.last_line + ":" + loc.last_column));
          }
          return results;
        } else if (command === "animate") {
          withinLocation = function(line, col, location) {
            return (line > location.first_line && line < location.last_line) || (line === location.first_line && line !== location.last_line && col >= location.first_column) || (line === location.last_line && line !== location.first_line && col <= location.last_column) || (line === location.first_line && line === location.last_line && col >= location.first_column && col <= location.last_column);
          };
          index = 0;
          printFrame = function() {
            var ch, colNum, j, len1, lineNum;
            event = sandbox.pencilTraceEvents[index];
            loc = event.location;
            lineNum = 1;
            colNum = 1;
            for (j = 0, len1 = code.length; j < len1; j++) {
              ch = code[j];
              if (ch === "\n") {
                process.stdout.write(ch);
                lineNum++;
                colNum = 1;
              } else {
                if (withinLocation(lineNum, colNum, event.location)) {
                  if (event.type === "enter") {
                    process.stdout.write(ch.yellow);
                  } else if (event.type === "leave") {
                    process.stdout.write(ch.red);
                  } else {
                    process.stdout.write(ch.green);
                  }
                } else {
                  process.stdout.write(ch);
                }
                colNum++;
              }
            }
            index++;
            if (index !== sandbox.pencilTraceEvents.length) {
              return setTimeout(printFrame, 1200);
            }
          };
          return printFrame(0);
        }
      } else if (command === "ast") {
        ast = instrumentCoffee(infile, code, {
          ast: true
        });
        return console.log(ast.toString().trim());
      } else {
        return printUsage();
      }
    } else {
      return printUsage();
    }
  };

}).call(this);
