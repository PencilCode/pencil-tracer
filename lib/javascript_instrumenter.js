// Generated by CoffeeScript 1.9.3
(function() {
  var JavaScriptInstrumenter, falafel;

  falafel = require("falafel");

  JavaScriptInstrumenter = (function() {
    function JavaScriptInstrumenter() {}

    JavaScriptInstrumenter.prototype.createInstrumentedLine = function(traceFunc, location, eventType) {
      var locationObj;
      locationObj = "{ first_line: " + location.start.line + ",";
      locationObj += " first_column: " + (location.start.column + 1) + ",";
      locationObj += " last_line: " + location.end.line + ",";
      locationObj += " last_column: " + (location.end.column + 1) + " }";
      return traceFunc + "({ location: " + locationObj + ", type: '" + eventType + "' })";
    };

    JavaScriptInstrumenter.prototype.instrument = function(filename, code, options) {
      var ref, result, traceFunc;
      if (options == null) {
        options = {};
      }
      traceFunc = (ref = options.traceFunc) != null ? ref : "pencilTrace";
      result = falafel(code, {
        locations: true
      }, (function(_this) {
        return function(node) {
          var instrumentedEnterLine, instrumentedLeaveLine, instrumentedLine;
          if (/(Declaration|Statement)$/.test(node.type) && node.type !== "BlockStatement") {
            instrumentedLine = _this.createInstrumentedLine(traceFunc, node.loc, "code");
            node.update(instrumentedLine + ";" + (node.source()));
          }
          if (node.type === "BlockStatement" && /^Function(Declaration|Expression)$/.test(node.parent.type)) {
            instrumentedEnterLine = _this.createInstrumentedLine(traceFunc, node.loc, "enter");
            instrumentedLeaveLine = _this.createInstrumentedLine(traceFunc, node.loc, "leave");
            return node.update("{ " + instrumentedEnterLine + "; try " + (node.source()) + " finally { " + instrumentedLeaveLine + "; } }");
          }
        };
      })(this));
      return result.toString();
    };

    return JavaScriptInstrumenter;

  })();

  exports.instrumentJs = function(filename, code, options) {
    var instrumenter;
    if (options == null) {
      options = {};
    }
    instrumenter = new JavaScriptInstrumenter();
    return instrumenter.instrument(filename, code, options);
  };

}).call(this);
